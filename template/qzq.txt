6.LCT
tree
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#define maxn 220000
#define inf 1000000000
#define ms 51061
using namespace std;
int fir[maxn],c[maxn][2],fa[maxn],size[maxn],rev[maxn];
unsigned int key[maxn],sum[maxn],add[maxn],mul[maxn];
int n,m,tot;
unsigned int ans;
struct et
{
    int s,t,next;
    void add(int x,int y)
    {
        s=x; t=y; next=fir[x]; fir[x]=tot;
    }
}e[maxn];

inline void update(int x)
{
    if (!x) return ;
    size[x]=size[c[x][0]]+size[c[x][1]]+1;
    sum[x]=(sum[c[x][0]]+sum[c[x][1]]+key[x])%ms;
}

inline bool root(int x)
{
    return (c[fa[x]][0]!=x&&c[fa[x]][1]!=x);
}

inline void reverse(int x)
{
    if (!x) return ;
    swap(c[x][0],c[x][1]);
    rev[x]^=1;
}

inline void mult(int x,int w)
{
    if (!x) return ;
    key[x]=key[x]*w%ms;
    sum[x]=sum[x]*w%ms;
    mul[x]=mul[x]*w%ms; 
    add[x]=add[x]*w%ms;
}

inline void addit(int x,int w)
{
    if (!x) return ;
    key[x]=(key[x]+w)%ms;
    sum[x]=(sum[x]+w*size[x])%ms;
    add[x]=(add[x]+w)%ms;
}

inline void down(int x)
{
    if (rev[x])
    {
        reverse(c[x][0]); reverse(c[x][1]);
        rev[x]=0;
    }
    if (mul[x]!=1)
    {
        mult(c[x][0],mul[x]); mult(c[x][1],mul[x]);
        mul[x]=1;
    }
    if (add[x])
    {
        addit(c[x][0],add[x]); addit(c[x][1],add[x]);
        add[x]=0;
    }
}

inline void zigzag(int x)
{
    //down(x);
    int y=fa[x],z=fa[y];
    int p=(c[y][1]==x),q=p^1;
    if (!root(y))
        if (c[z][0]==y) c[z][0]=x; else c[z][1]=x;
    fa[x]=z; fa[y]=x; fa[c[x][q]]=y;
    c[y][p]=c[x][q]; c[x][q]=y;
    update(y);
}

inline void relax(int x)
{
    if (!root(x)) relax(fa[x]);
    down(x);
}

inline void splay(int x)
{
    relax(x);
    while (!root(x))
    {
        int y=fa[x],z=fa[y];
        //if (z) down(z); down(y);
        if (!root(y))
            if ((c[y][0]==x)xor(c[z][0]==y)) zigzag(x); else zigzag(y);
        zigzag(x);
    }
    //down(x);
    update(x);
}

inline int access(int x)
{
    int y=0;
    for (;x;x=fa[x])
    {
        splay(x);
        c[x][1]=y;
        update(x);
        y=x;
    }
    return y;
}

inline void link(int x,int y)
{
    access(x); splay(x);
    reverse(x);
    fa[x]=y;
}

inline void cut(int x,int y)
{
    access(x); splay(y);
    if (fa[x]==y) fa[x]=0; 
    else
    {
        access(y); splay(x);
        fa[y]=0;
    }
}

inline void dfs(int now)
{
    for (int j=fir[now];j;j=e[j].next)
    {
        int k=e[j].t;
        if (fa[now]!=k) fa[k]=now,dfs(k);
    }
}

int main()
{
    //freopen("tree.in","r",stdin);
    scanf("%d%d",&n,&m);
    int x,y;
    for (int i=1;i<=n;i++) size[i]=key[i]=mul[i]=sum[i]=1,add[i]=0;
    for (int i=1;i<n;i++)
    {
        scanf("%d%d",&x,&y);
        e[++tot].add(x,y);
        e[++tot].add(y,x);
    }
    int rot=rand()%n+1;
    dfs(rot);
    char sign;
    int u,v,z,lca;
    for (int i=1;i<=m;i++)
    {
        scanf("\n%c",&sign);
        switch (sign)
        {
            case '+':
                scanf("%d%d%d",&u,&v,&z);
                access(u); lca=access(v); splay(u);
                sum[lca]=(sum[lca]+z)%ms,key[lca]=(key[lca]+z)%ms;
                addit(c[lca][1],z);
                if (u!=lca)    addit(u,z);
            break;
            case '-':
                scanf("%d%d%d%d",&x,&y,&u,&v);
                cut(x,y);
                link(u,v);
            break;
            case '*':
                scanf("%d%d%d",&u,&v,&z);
                access(u); lca=access(v); splay(u);
                sum[lca]=(sum[lca]+key[lca]*(z-1))%ms,key[lca]=(key[lca]*z)%ms;
                mult(c[lca][1],z);
                if (u!=lca) mult(u,z);
            break;
            case '/':
                scanf("%d%d",&u,&v);
                access(u); lca=access(v); splay(u);
                if (u==lca)
                    ans=(key[lca]+sum[c[lca][1]])%ms;
                else 
                    ans=(key[lca]+sum[c[lca][1]]+sum[u])%ms;
                printf("%d\n",ans);
            break;
        }
    }
    return 0;
}

7.Simplex
Match
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#define maxn 1010
#define inf 2147483647
using namespace std;
int mat[1000][1000],num[1000][1000],next[maxn],c[maxn],rank[maxn];
bool v[maxn*maxn],p[maxn][maxn],ls[maxn];
int n,m,a,b,sum;

void change(int x,int e)
{
    int last=-1;
    for (int i=0;i<=m;i++)
        if (mat[x][i])
        {
            next[i]=last;
            last=i;
        }
    for (int i=0;i<=n;i++)
    {
        if (i==x||mat[i][e]==0) continue;
        for (int j=last;j!=-1;j=next[j])
        {
            if (j==e) continue;
            mat[i][j]-=mat[i][e]*mat[x][j];
        }
        mat[i][e]=-mat[i][e];
    }
}

int simplex()
{
    while (1)
    {
        int now=0;
        for (int i=1;i<=m;i++)     
            if (mat[0][i]>0) { 
                now=i;
                break;
            }
        if (now==0) return -mat[0][0];
        int tmp,mi=inf;
        for (int i=1;i<=n;i++)
            if (mat[i][now]>0&&mat[i][0]<mi)
                mi=mat[i][0],tmp=i;
        change(tmp,now);
    }
}

int gcd(int a,int b)
{
    if (b==0) return a;
    else return gcd(b,a%b);
}

int main()
{
    scanf("%d%d",&a,&b);
    for (int i=1;i<=b;i++) v[i*i]=1;
    memset(ls,0,sizeof(ls));
    for (int i=a;i<=b;i++)
        for (int j=a;j<i;j++)
            if (v[i*i-j*j]&&gcd(i,j)==1)
            {
                p[i][j]=1;
                if (!ls[i]) c[++n]=i,ls[i]=1;
                if (!ls[j]) c[++n]=j,ls[j]=1;
            }
    sort(c+1,c+n+1);
    for (int i=1;i<=n;i++) rank[c[i]]=i;
    for (int i=a;i<=b;i++)
        for (int j=a;j<i;j++)
        {
            if (p[i][j])
            {
                m++;
                mat[rank[i]][m]=1;
                mat[rank[j]][m]=1;
                mat[0][m]=i+j;
            }
        }
    for (int i=1;i<=n;i++)
        mat[i][0]=1;
    int ans=simplex();
    for (int i=1;i<=n;i++) sum+=(mat[i][0]==0);
    printf("%d %d\n",sum,ans);
    return 0;
}

8.2Î¬BIT
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#define maxn 2048
using namespace std;
int n,m;
struct bit
{
    int b[maxn][maxn];
    void add(int x,int y,int z)
    {
        for (int i=x;i<=n;i+=(i&-i))
            for (int j=y;j<=m;j+=(j&-j))
                b[i][j]+=z;
    }
    int ask(int x,int y)
    {
        int tmp=0;
        for (int i=x;i>0;i-=(i&-i))
            for (int j=y;j>0;j-=(j&-j))
                tmp+=b[i][j];
        return tmp;
    }
}s,t,l,r;

void ins(int x1,int y1,int x2,int y2,int z)
{
    s.add(x1,y1,z); s.add(x2+1,y1,-z); s.add(x1,y2+1,-z); s.add(x2+1,y2+1,z);
    l.add(x1,y1,z*x1); l.add(x2+1,y1,-z*(x2+1)); l.add(x1,y2+1,-z*x1); l.add(x2+1,y2+1,z*(x2+1));
    r.add(x1,y1,z*y1); r.add(x2+1,y1,-z*y1); r.add(x1,y2+1,-z*(y2+1)); r.add(x2+1,y2+1,z*(y2+1));
    t.add(x1,y1,z*x1*y1); t.add(x2+1,y1,-z*(x2+1)*y1); t.add(x1,y2+1,-z*x1*(y2+1)); t.add(x2+1,y2+1,z*(x2+1)*(y2+1));
}

int query(int x1,int y1,int x2,int y2)
{
    int a1=s.ask(x2,y2)*(x2+1)*(y2+1)-s.ask(x1-1,y2)*x1*(y2+1)-s.ask(x2,y1-1)*(x2+1)*y1+s.ask(x1-1,y1-1)*x1*y1;
    int a2=l.ask(x2,y2)*(y2+1)-l.ask(x1-1,y2)*(y2+1)-l.ask(x2,y1-1)*y1+l.ask(x1-1,y1-1)*y1;
    int a3=r.ask(x2,y2)*(x2+1)-r.ask(x1-1,y2)*x1-r.ask(x2,y1-1)*(x2+1)+r.ask(x1-1,y1-1)*x1;
    int a4=t.ask(x2,y2)-t.ask(x1-1,y2)-t.ask(x2,y1-1)+t.ask(x1-1,y1-1);
    return a1-a2-a3+a4;
}

int main()
{
    //freopen("make.in","r",stdin);
    char sign[10];
    scanf("%s%d%d",sign,&n,&m);
    int x1,x2,y1,y2;
    int z;
    while (scanf("%s",sign)!=EOF)
    {
        if (sign[0]=='L') 
        {
            scanf("%d%d%d%d%d",&x1,&y1,&x2,&y2,&z);
            ins(x1,y1,x2,y2,z);
        }
        else
        {
            scanf("%d%d%d%d",&x1,&y1,&x2,&y2);
            int ans=query(x1,y1,x2,y2);
            printf("%d\n",ans);
        }
    }
    return 0;
}